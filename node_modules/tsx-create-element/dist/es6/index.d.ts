/// <reference types="react" />
export declare type StatelessProps<T> = T & {
    children?: (JSX.Element | Content) | (JSX.Element | Content)[];
};
export interface StatelessComponent<T> {
    (props: StatelessProps<T>): JSX.Element;
}
export declare type Content = string | boolean | number;
export interface AttributeMap {
    [key: string]: Content | Function;
}
export interface ActiveElementInfo {
    childPositions: number[];
    scrollTop?: number;
    selectionStart?: number;
    selectionEnd?: number;
    selectionDirection?: string;
}
export declare function createElement<T>(tag: StatelessComponent<T>, attrs: StatelessProps<T>, ...children: JSX.Element[]): any;
export declare function createElement(tag: string, attrs: AttributeMap, ...children: (Element | Content)[]): any;
export declare function mount(element: Element | JSX.Element, container: HTMLElement): void;
export declare function findElementByChildPositions(childPositions: number[], container?: Element): HTMLElement;
export declare function focusActiveElement(element: HTMLElement, activeElementInfo: ActiveElementInfo): void;
export declare function setActiveElement(activeElementInfo: ActiveElementInfo, container?: Element): void;
export declare function getActiveElementInfo(container?: HTMLElement): ActiveElementInfo;
